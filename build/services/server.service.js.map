{"version":3,"sources":["../../src/services/server.service.js"],"names":["express","require","bodyParser","app","config","port","server","schema","resolvers","apiRouter","ApolloServer","gql","use","graphQlServer","typeDefs","applyMiddleware","path","json","exports","start","listen","err","console","log","process","exit"],"mappings":";;AAQA;;;;AARA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAME,GAAG,GAAGH,OAAO,EAAnB;;AACA,IAAMI,MAAM,GAAGH,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAMI,IAAI,GAAGD,MAAM,CAACE,MAAP,CAAcD,IAA3B;;AACA,IAAME,MAAM,GAAGN,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAMO,SAAS,GAAGP,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAMQ,SAAS,GAAGR,OAAO,CAAC,WAAD,CAAzB;;eAG8BA,OAAO,CAAC,uBAAD,C;IAA7BS,Y,YAAAA,Y;IAAcC,G,YAAAA,G;;AAEtBR,GAAG,CAACS,GAAJ,CAAQ,uBAAR;AAEA,IAAMC,aAAa,GAAG,IAAIH,YAAJ,CAAiB;AACrCI,EAAAA,QAAQ,EAAGP,MAD0B;AAErCC,EAAAA,SAAS,EAATA;AAFqC,CAAjB,CAAtB;AAKAK,aAAa,CAACE,eAAd,CAA8B;AAAEZ,EAAAA,GAAG,EAAHA,GAAF;AAAOa,EAAAA,IAAI,EAAE;AAAb,CAA9B;AAEAb,GAAG,CAACS,GAAJ,CAAQV,UAAU,CAACe,IAAX,EAAR;AAEAd,GAAG,CAACS,GAAJ,CAAQ,SAAR,EAAmBH,SAAnB;;AAEAS,OAAO,CAACC,KAAR,GAAgB,YAAM;AACpBhB,EAAAA,GAAG,CAACiB,MAAJ,CAAWf,IAAX,EAAiB,UAACgB,GAAD,EAAS;AACxB,QAAIA,GAAJ,EAAS;AACPC,MAAAA,OAAO,CAACC,GAAR,mBAAuBF,GAAvB;AACAG,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAC,CAAd;AACD;;AACDH,IAAAA,OAAO,CAACC,GAAR,mCAAuClB,IAAvC;AACD,GAND;AAOD,CARD","sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst config = require(\"../configs\");\nconst port = config.server.port;\nconst schema = require('../schemas');\nconst resolvers = require('../resolvers');\nconst apiRouter = require('../routes');\nimport cors from \"cors\";\n\nconst { ApolloServer, gql } = require('apollo-server-express');\n\napp.use(cors());\n\nconst graphQlServer = new ApolloServer({\n  typeDefs : schema,\n  resolvers\n})\n\ngraphQlServer.applyMiddleware({ app, path: \"/graphql\" });\n\napp.use(bodyParser.json());\n\napp.use('/api/v1', apiRouter);\n\nexports.start = () => {\n  app.listen(port, (err) => {\n    if (err) {\n      console.log(`Errors: ${err}`);\n      process.exit(-1);\n    }\n    console.log(`app is runnning on port ${port}`);\n  });\n};"],"file":"server.service.js"}
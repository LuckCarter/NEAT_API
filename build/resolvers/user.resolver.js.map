{"version":3,"sources":["../../src/resolvers/user.resolver.js"],"names":["module","exports","Query","users","parent","args","context","Models","User","find","user","findById","id","login","Email","Error","bcrypt","compareSync","Password","valid","token","jwt","sign","_id","IsAdmin","process","env","JWT_SECRET","expiresIn","Mutation","deleteUser","findByIdAndDelete","userUpdate","findByIdAndUpdate","Firstname","Adress","Phone","Lastname","console","log","signup","hash","save"],"mappings":"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","sourcesContent":["import bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { Model } from \"mongoose\";\nimport * as Models from \"../models\";\nimport utils from \"../utils/utils\";\nmodule.exports = {\n  Query: {\n    users: (parent, args, context) => {\n      // if (!context.req.isAuth) {\n      //   throw new Error('Unauthenticated!');\n      // }\n      return Models.User.find();\n    },\n    user: (parent, args, context) => {\n      // if (!context.req.isAuth) {\n      //   throw new Error(\"Unauthenticated!\");\n      // }\n      return Models.User.findById(args.id);\n    },\n    login: async (parent, args, context) => {\n      // utils.IsAdmin(context.req);\n    \n      const User = await Models.User.find({ Email: args.Email });\n\n      if (!User[0]) {\n    \n        throw new Error(\"Email is Incorrect\");\n      }\n      const valid = await bcrypt.compareSync(args.Password, User[0].Password);\n      if (!valid) {\n        throw new Error(\"Incorrect password\");\n      }\n\n      // return json web token\n      const token = jwt.sign(\n        { id: User[0]._id, Email: User[0].Email, IsAdmin: User[0].IsAdmin },\n        process.env.JWT_SECRET,\n        { expiresIn: \"1d\" }\n      );\n      return token;\n    },\n  },\n  Mutation: {\n    deleteUser: (parent, args) => {\n      return Models.User.findByIdAndDelete(args.id);\n    },\n    /*\n    +-------------------------------------------------------------+\n    | UPDATE\n    +-------------------------------------------------------------+\n    */\n    userUpdate: async (parent, args, context) => {\n      // if (!context.req.isAuth) {\n      //   throw new Error('Unauthenticated!');\n      // }\n      try {\n        await Models.User.findByIdAndUpdate(\n          { _id: args.id },\n          { \n          Firstname: args.Firstname,\n          Email:args.Email,\n          Adress:args.Adress,\n          Phone:args.Phone,\n          Password:args.Password,\n          Lastname:args.Lastname,\n          IsAdmin:args.IsAdmin\n         }\n        );\n        return Models.User.findById(args.id);\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    /*\n    +-------------------------------------------------------------+\n    | SIGN UP\n    +-------------------------------------------------------------+\n    */\n    signup: async (parent, args, context) => {\n      const User = new Models.User({\n        Firstname: args.Firstname,\n        Lastname: args.Lastname,\n        Phone: args.Phone,\n        Adress: args.Adress,\n        Email: args.Email,\n        Password: await bcrypt.hash(args.Password, 10),\n        IsAdmin: args.IsAdmin,\n      });\n      await User.save();\n      console.log(\"Enregistrer\");\n      // return json web token\n      return jwt.sign({ Email: User.Email }, process.env.JWT_SECRET, {\n        expiresIn: \"1y\",\n      });\n    },\n  },\n};\n"],"file":"user.resolver.js"}
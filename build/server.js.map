{"version":3,"sources":["../src/server.js"],"names":["require","config","sgMail","startServer","app","stripe","use","express","json","server","ApolloServer","typeDefs","resolvers","context","req","res","next","Auth","applyMiddleware","get","send","post","body","Price","receipt_email","paymentIntents","create","amount","Math","round","currency","paymentIntent","console","log","setApiKey","process","env","SENDGRID_API_KEY","msg","to","from","subject","text","html","then","error","clientSecret","client_secret","mongoose","connect","Config","db","url","useNewUrlParser","useCreateIndex","useUnifiedTopology","useFindAndModify","err","exit","listen","port","PORT","e","graphqlPath"],"mappings":"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","sourcesContent":["\nrequire('dotenv').config();\nimport { ApolloServer, gql } from \"apollo-server-express\";\nimport express from \"express\";\nimport mongoose from \"mongoose\";\nimport typeDefs from \"./schemas\";\nimport resolvers from \"./resolvers\";\nimport * as Config from \"./configs\";\nimport cors from \"cors\";\nimport Auth from \"./middleware/Auth\";\nconst sgMail = require('@sendgrid/mail')\nconst startServer = async () => {\n  const app = express();\n  const stripe = require(\"stripe\")(\"sk_test_51IdKa0EWLULmTbAKV5JLEAXK4XalxwTWVRVYc9nl2bUEeHLnvZ8IFXnuxUdNjtVT0nktMU79VVeuDsSHE58KO5nF00Bjcw0zFE\");\n  app.use(express.static(\".\"));\n  app.use(express.json());\n\n app.use(cors())\n  const server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    context:({req,res,next}) => {return {req,res,next}}\n  });\n  app.use(Auth);\n  server.applyMiddleware({ app });\n\n\n  app.get(\"/\", async (req, res) => {\n    \n    res.send(\"API WORKING\");\n  });\n  app.post(\"/create-payment-intent\", async (req, res) => {\n    const { Price,receipt_email } = req.body;\n\n    // Create a PaymentIntent with the order amount and currency\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: Math.round((Price*100)),\n      currency: \"usd\"\n\n    });\n    console.log(receipt_email)\n    sgMail.setApiKey(process.env.SENDGRID_API_KEY)\n    const msg = {\n      to: receipt_email, // Change to your recipient\n      from: \"regis.grumberg@gmail.com\", // Change to your verified sender\n      subject: 'Achat Fullstack gql',\n      text: `Achat fait sur une app de test au prix de ${Price}â‚¬`,\n      html: `<strong>Achat fait sur une app de test au prix de ${Price}â‚¬</strong>`,\n    }\n    sgMail\n      .send(msg)\n      .then(() => {\n        console.log('Email sent')\n      })\n      .catch((error) => {\n        console.error(error)\n      })\n    res.send({\n      clientSecret: paymentIntent.client_secret\n    });\n\n  });\n\n  await mongoose\n    .connect(Config.db.url, {\n      useNewUrlParser: true,\n      useCreateIndex: true,\n      useUnifiedTopology: true,\n      useFindAndModify:true\n    })\n    .then(() => {\n      console.log(\"Successfully connect to database\");\n    })\n    .catch((err) => {\n      console.log('couldn\"t not connect to database', err);\n      process.exit(-1);\n    });\n\n  app.listen({ port: process.env.PORT }, (e) =>\n    console.log(\n      `ðŸš€ GraphQl ready at http://localhost:${process.env.PORT}${server.graphqlPath}`\n    )\n  );\n};\n\nstartServer();\n// require('dotenv').config()\n// const app = require(\"./services/server.service\");\n// const mongoService = require(\"./services/mongoose.service\");\n\n// mongoService.dbConnect();\n// app.start();"],"file":"server.js"}
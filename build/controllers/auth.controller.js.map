{"version":3,"sources":["../../src/controllers/auth.controller.js"],"names":["User","require","jwtConfig","bcrypt","jwt","userValidationSchema","exports","register","req","res","err","validation","validate","body","console","log","error","status","send","hashedPassword","hashSync","password","user","email","firstname","lastname","address","phone","admin","save","then","data","userToken","sign","id","_id","secret","expiresIn","auth","token","type","message","getUserById","findById","params","login","findOne","compareSync"],"mappings":"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","sourcesContent":["const User = require('../models/user.model');\nconst jwtConfig = require('../configs/jwt.config');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst userValidationSchema = require(\"../utils/validators/user.validation\");\n\nexports.register = (req, res, err) => {\n    const validation = userValidationSchema.validate(req.body);\n\n    console.log(validation);\n    if (validation.error) {\n        return res.status(400).send(validation.error);\n    }\n\n    let hashedPassword = bcrypt.hashSync(req.body.password, 8);\n\n    const user = new User({\n        email: req.body.email,\n        password: hashedPassword,\n        firstname: req.body.firstname,\n        lastname: req.body.lastname,\n        address: req.body.address,\n        phone: req.body.phone,\n        admin: false,\n    });\n\n    user.save()\n        .then(data => {\n            console.log(\"[DEBUG] User \" + req.body.email + \" has registered.\");\n            let userToken = jwt.sign(\n                {\n                    id: user._id,\n                    admin: user.admin\n                },\n                jwtConfig.secret,\n                {\n                    expiresIn: 86400\n                }\n            );\n            res.send({\n                auth: true,\n                token: userToken,\n                type: \"success\",\n                message: \"User successfully registered.\"\n            });\n        })\n        .catch(err => {\n            res.status(500).send({\n                message: err.message\n            })\n        })\n};\n\nexports.getUserById = (req, res) => {\n    User.findById({ _id : req.params.id }, (err, user) => {\n        if(err) {\n            console.log('[LOG] USER FETCH FAILURE, SEE ERROR LOG:');\n            console.log(err);\n        }\n\n        res.send(user);\n    })\n};\n\nexports.login = (req, res, err) => {\n    User.findOne({ email: req.body.email })\n        .then(user => {\n            if (!user || !bcrypt.compareSync(req.body.password, user.password)) {\n                return res.status(401).send({\n                    type: \"error\",\n                    message: \"The information entered are incorrect.\"\n                });\n            }\n\n            let userToken = jwt.sign(\n                {\n                    id: user._id,\n                    admin: user.admin,\n                },\n                jwtConfig.secret,\n                {\n                    expiresIn: 86400,\n                }\n            );\n\n            res.send({\n                auth: true,\n                token: userToken\n            });\n        })\n        .catch(err => {\n            return res.status(500).send({\n                message: err || \"An error occurred when logging in.\"\n            });\n    });\n};"],"file":"auth.controller.js"}
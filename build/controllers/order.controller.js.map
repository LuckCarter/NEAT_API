{"version":3,"sources":["../../src/controllers/order.controller.js"],"names":["stripe","require","process","env","STRIPE_KEY","Order","uuid","bcrypt","exports","create","req","res","err","order","user","body","products","totalPrice","status","save","then","data","send","message","findAll","find","populate","orders","findByUserId","params","id","findById","_id","findByIdAndUpdate","findByIdAndRemove","findByIdAndDelete"],"mappings":"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","sourcesContent":["const stripe = require('stripe')(process.env.STRIPE_KEY);\nconst Order = require('../models/order.model');\nconst uuid = require('uuid');\nconst bcrypt = require('bcrypt');\n\nexports.create = async (req, res, err) => {\n    const order = new Order({\n        user: req.body.user,\n        products: req.body.products,\n        totalPrice: req.body.totalPrice,\n        status: req.body.status\n    });\n\n    // try {\n    //     await stripe.charges.create({\n    //         source: req.body.stripeToken,\n    //         currency: 'eur',\n    //         amount: req.body.totalPrice,\n    //         description: `Order ${new Date()} by ${req.body.user}`,\n    //     });\n    // } catch(err) {\n    //     console.log(err);\n    // }\n\n    order.save()\n        .then(data => {\n            order.status = \"processed\";\n            order.save();\n            res.send(data);\n        })\n        .catch(err => {\n            res.status(500).send({\n                message: err.message\n            })\n        })\n};\n\nexports.findAll = (req, res) => {\n    Order.find()\n        .populate('user')\n        .populate('products')\n        .then(orders => {\n            res.send(orders);\n        })\n        .catch(err => {\n            res.status(500).send({\n                message: err.message || \"An error has occurred while fetching all orders.\"\n            })\n        })\n};\n\nexports.findByUserId = (req, res) => {\n    Order.find({ user: req.params.id })\n        .populate('products')\n        .then(order => {\n            res.send(order)\n        })\n        .catch(err => {\n            res.status(500).send({\n                message: err.message || \"An error has occurred while fetching the order.\"\n            })\n        })\n};\n\nexports.findById = (req, res) => {\n    Order.findById(_id = req.params.id)\n        .populate('products')\n        .populate('user')\n        .then(order => {\n            res.send(order)\n        })\n        .catch(err => {\n            res.status(500).send({\n                message: err.message || \"An error has occurred while fetching the order.\"\n            })\n        })\n};\n\nexports.findByIdAndUpdate = (req, res) => {\n    Order.findByIdAndUpdate(req.params.id, req.body, { new: true })\n        .populate('products')\n        .populate('user')\n        .then(order => {\n            res.send(order)\n        })\n        .catch(err => {\n            res.status(500).send({\n                message: err.message || \"An error has occurred while updating the order.\"\n            })\n        })\n};\n\nexports.findByIdAndRemove = (req, res) => {\n    Order.findByIdAndDelete(req.params.id)\n        .then(order => {\n            res.send(order);\n        })\n        .catch(err => {\n            res.status(500).send({\n                message: err.message || \"An error has occurred while deleting the order.\"\n            })\n        })\n};"],"file":"order.controller.js"}